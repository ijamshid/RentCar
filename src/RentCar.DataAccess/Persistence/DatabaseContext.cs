using Microsoft.EntityFrameworkCore;
using RentCar.Core.Entities;
using System.Reflection;
namespace RentCar.DataAccess.Persistence;

public class DatabaseContext : DbContext
{
    public DatabaseContext(DbContextOptions options) : base(options)
    { }

    public DbSet<User> Users { get; set; }
    public DbSet<Brand> Brands { get; set; }
    public DbSet<Car> Cars { get; set; }
    public DbSet<Reservation> Reservations { get; set; }
    public DbSet<Payment> Payments { get; set; }
    public DbSet<Rating> Ratings { get; set; }
    public DbSet<Role> Roles { get; set; }
    public DbSet<Permission> Permissions { get; set; }
    public DbSet<UserRole> UserRoles { get; set; }
    public DbSet<RolePermission> RolePermissions { get; set; }


    protected override void OnModelCreating(ModelBuilder builder)
    {

        builder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        base.OnModelCreating(builder);

        // Roles
        builder.Entity<Role>().HasData(
            new Role { Id = 1, Name = "Admin", Description = "Administrator role with full access" },
            new Role { Id = 2, Name = "Customer", Description = "Default role for regular users" },
            new Role { Id = 3, Name = "Staff", Description = "Staff role for managing cars and reservations" }
        );

        // Permissions
        builder.Entity<Permission>().HasData(
            new Permission { Id = 1, Name = "ViewCars", Description = "View car listings" },
            new Permission { Id = 2, Name = "ManageCars", Description = "Create, edit, delete cars" },
            new Permission { Id = 3, Name = "ViewUsers", Description = "View user profiles" },
            new Permission { Id = 4, Name = "ManageUsers", Description = "Create, edit, delete users" },
            new Permission { Id = 5, Name = "CreateReservation", Description = "Create new reservations" },
            new Permission { Id = 6, Name = "ViewReservations", Description = "View reservation details" },
            new Permission { Id = 7, Name = "ManageReservations", Description = "Update, cancel, complete reservations" },
            new Permission { Id = 8, Name = "ProcessPayments", Description = "Process and manage payments" },
            new Permission { Id = 9, Name = "ViewRatings", Description = "View car ratings" },
            new Permission { Id = 10, Name = "CreateRating", Description = "Create new ratings" },
            new Permission { Id = 11, Name = "ManageBrands", Description = "Create, edit, delete car brands" },
            new Permission { Id = 12, Name = "UploadImages", Description = "Upload and manage car images" }
        );

        // Role-Permission Assignments
        List<RolePermission> rolePermissions = new List<RolePermission>();
        for (int i = 1; i <= 12; i++)
        {
            rolePermissions.Add(new RolePermission { RoleId = 1, PermissionId = i }); // Admin gets all
        }
        rolePermissions.Add(new RolePermission { RoleId = 2, PermissionId = 1 });
        rolePermissions.Add(new RolePermission { RoleId = 2, PermissionId = 5 });
        rolePermissions.Add(new RolePermission { RoleId = 2, PermissionId = 6 });
        rolePermissions.Add(new RolePermission { RoleId = 2, PermissionId = 9 });
        rolePermissions.Add(new RolePermission { RoleId = 2, PermissionId = 10 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 1 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 2 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 3 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 6 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 7 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 8 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 9 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 11 });
        rolePermissions.Add(new RolePermission { RoleId = 3, PermissionId = 12 });
        builder.Entity<RolePermission>().HasData(rolePermissions);


        // Admin User Seed Data
        // IMPORTANT: Using HMACSHA512 is NOT recommended for password hashing due to its speed.
        // For production, use slow, adaptive hashers like BCrypt, Scrypt, or Argon2 (e.g., via BCrypt.Net-Next).
        // The hash and salt below are example Base64 strings generated by HMACSHA512 for "test123".
        // These values WILL BE DIFFERENT if you regenerate them, as HMACSHA512 uses a random salt.
        string adminPasswordHashBase64 = "h2q2T2u9Z8x4V5c1B0N7m6L5k4J3i2H1g0F9e8D7c6B5a4S3q2W1e0R9t8Y7u6I5o4P3a2S1d0F9g8H7j6K5l4Z3x2C1v0B9n8M7"; // Placeholder - replace with your actual generated Base64 hash
        string adminSaltBase64 = "k5j4h3g2f1e0d9c8b7a6s5q4w3e2r1t0y9u8i7o6p5a4s3d2f1g0h9j8k7l6z5x4c3v2b1n0m9q8w7e6r5t4y3u2i1o0p9a8s7d6f5g4h3j2k1l0"; // Placeholder - replace with your actual generated Base64 salt

        builder.Entity<User>().HasData(
            new User
            {
                Id = 1,
                Firstname = "Jamshid",
                Lastname = "Ismoilov",
                Email = "admin@carrental.com",
                PasswordHash = adminPasswordHashBase64,
                PhoneNumber = "555-123-4567",
                Address = "123 Admin Lane",
                DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, DateTimeKind.Utc),
                IsActive = true
            }
        );
        //Assign Admin Role to Primary Admin User
        builder.Entity<UserRole>().HasData(
             new UserRole { UserId = 1, RoleId = 1 } // Link Primary Admin (Id 1) to Admin Role (Id 1)
         );
    }
}
